
A4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f6  00800200  0000068e  00000722  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000068e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000096  008002f6  008002f6  00000818  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000848  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000189b  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f3d  00000000  00000000  000021eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000093d  00000000  00000000  00003128  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  00003a68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000721  00000000  00000000  00003c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008f7  00000000  00000000  0000434d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004c44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	c2 c2       	rjmp	.+1412   	; 0x5e2 <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e8       	ldi	r30, 0x8E	; 142
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 3f       	cpi	r26, 0xF6	; 246
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a6 ef       	ldi	r26, 0xF6	; 246
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 38       	cpi	r26, 0x8C	; 140
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	ab d2       	rcall	.+1366   	; 0x676 <main>
 120:	b4 c2       	rjmp	.+1384   	; 0x68a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <lcd_nibble>:

void lcd_blank( uint8_t len )                   // blank n digits
{
  while( len-- )
    lcd_putchar( ' ' );
}
 124:	e2 e0       	ldi	r30, 0x02	; 2
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	90 81       	ld	r25, Z
 12a:	9f 7e       	andi	r25, 0xEF	; 239
 12c:	90 83       	st	Z, r25
 12e:	88 23       	and	r24, r24
 130:	1c f4       	brge	.+6      	; 0x138 <lcd_nibble+0x14>
 132:	90 81       	ld	r25, Z
 134:	90 61       	ori	r25, 0x10	; 16
 136:	90 83       	st	Z, r25
 138:	e2 e0       	ldi	r30, 0x02	; 2
 13a:	f1 e0       	ldi	r31, 0x01	; 1
 13c:	90 81       	ld	r25, Z
 13e:	97 7f       	andi	r25, 0xF7	; 247
 140:	90 83       	st	Z, r25
 142:	86 ff       	sbrs	r24, 6
 144:	03 c0       	rjmp	.+6      	; 0x14c <lcd_nibble+0x28>
 146:	90 81       	ld	r25, Z
 148:	98 60       	ori	r25, 0x08	; 8
 14a:	90 83       	st	Z, r25
 14c:	73 98       	cbi	0x0e, 3	; 14
 14e:	85 fd       	sbrc	r24, 5
 150:	73 9a       	sbi	0x0e, 3	; 14
 152:	a5 98       	cbi	0x14, 5	; 20
 154:	84 fd       	sbrc	r24, 4
 156:	a5 9a       	sbi	0x14, 5	; 20
 158:	e2 e0       	ldi	r30, 0x02	; 2
 15a:	f1 e0       	ldi	r31, 0x01	; 1
 15c:	80 81       	ld	r24, Z
 15e:	80 64       	ori	r24, 0x40	; 64
 160:	80 83       	st	Z, r24
 162:	85 e0       	ldi	r24, 0x05	; 5
 164:	8a 95       	dec	r24
 166:	f1 f7       	brne	.-4      	; 0x164 <lcd_nibble+0x40>
 168:	00 00       	nop
 16a:	80 81       	ld	r24, Z
 16c:	8f 7b       	andi	r24, 0xBF	; 191
 16e:	80 83       	st	Z, r24
 170:	08 95       	ret

00000172 <lcd_command>:
 172:	cf 93       	push	r28
 174:	c8 2f       	mov	r28, r24
 176:	e2 e0       	ldi	r30, 0x02	; 2
 178:	f1 e0       	ldi	r31, 0x01	; 1
 17a:	80 81       	ld	r24, Z
 17c:	8f 7d       	andi	r24, 0xDF	; 223
 17e:	80 83       	st	Z, r24
 180:	8c 2f       	mov	r24, r28
 182:	d0 df       	rcall	.-96     	; 0x124 <lcd_nibble>
 184:	8c 2f       	mov	r24, r28
 186:	82 95       	swap	r24
 188:	80 7f       	andi	r24, 0xF0	; 240
 18a:	cc df       	rcall	.-104    	; 0x124 <lcd_nibble>
 18c:	87 ec       	ldi	r24, 0xC7	; 199
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_command+0x1e>
 194:	00 c0       	rjmp	.+0      	; 0x196 <lcd_command+0x24>
 196:	00 00       	nop
 198:	c4 30       	cpi	r28, 0x04	; 4
 19a:	18 f0       	brcs	.+6      	; 0x1a2 <lcd_command+0x30>
 19c:	c0 38       	cpi	r28, 0x80	; 128
 19e:	50 f0       	brcs	.+20     	; 0x1b4 <lcd_command+0x42>
 1a0:	07 c0       	rjmp	.+14     	; 0x1b0 <lcd_command+0x3e>
 1a2:	8f e3       	ldi	r24, 0x3F	; 63
 1a4:	9f e1       	ldi	r25, 0x1F	; 31
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_command+0x34>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <lcd_command+0x3a>
 1ac:	00 00       	nop
 1ae:	c0 e8       	ldi	r28, 0x80	; 128
 1b0:	c0 93 00 02 	sts	0x0200, r28	; 0x800200 <__data_start>
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <lcd_putchar>:
 1b8:	cf 93       	push	r28
 1ba:	c8 2f       	mov	r28, r24
 1bc:	e2 e0       	ldi	r30, 0x02	; 2
 1be:	f1 e0       	ldi	r31, 0x01	; 1
 1c0:	80 81       	ld	r24, Z
 1c2:	80 62       	ori	r24, 0x20	; 32
 1c4:	80 83       	st	Z, r24
 1c6:	8c 2f       	mov	r24, r28
 1c8:	ad df       	rcall	.-166    	; 0x124 <lcd_nibble>
 1ca:	8c 2f       	mov	r24, r28
 1cc:	82 95       	swap	r24
 1ce:	80 7f       	andi	r24, 0xF0	; 240
 1d0:	a9 df       	rcall	.-174    	; 0x124 <lcd_nibble>
 1d2:	87 ec       	ldi	r24, 0xC7	; 199
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <lcd_putchar+0x1e>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <lcd_putchar+0x24>
 1dc:	00 00       	nop
 1de:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 1e2:	8f 5f       	subi	r24, 0xFF	; 255
 1e4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
 1e8:	80 39       	cpi	r24, 0x90	; 144
 1ea:	21 f0       	breq	.+8      	; 0x1f4 <lcd_putchar+0x3c>
 1ec:	80 3d       	cpi	r24, 0xD0	; 208
 1ee:	21 f4       	brne	.+8      	; 0x1f8 <lcd_putchar+0x40>
 1f0:	80 e8       	ldi	r24, 0x80	; 128
 1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <lcd_putchar+0x3e>
 1f4:	80 ec       	ldi	r24, 0xC0	; 192
 1f6:	bd df       	rcall	.-134    	; 0x172 <lcd_command>
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <lcd_puts>:
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	ec 01       	movw	r28, r24
 202:	88 81       	ld	r24, Y
 204:	88 23       	and	r24, r24
 206:	29 f0       	breq	.+10     	; 0x212 <lcd_puts+0x16>
 208:	21 96       	adiw	r28, 0x01	; 1
 20a:	d6 df       	rcall	.-84     	; 0x1b8 <lcd_putchar>
 20c:	89 91       	ld	r24, Y+
 20e:	81 11       	cpse	r24, r1
 210:	fc cf       	rjmp	.-8      	; 0x20a <lcd_puts+0xe>
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <lcd_init>:


void lcd_init( void )
{
  LCD_DDR_D4 = 1;                               // enable output pins
 218:	9d 9a       	sbi	0x13, 5	; 19
  LCD_DDR_D5 = 1;
 21a:	6b 9a       	sbi	0x0d, 3	; 13
  LCD_DDR_D6 = 1;
 21c:	e1 e0       	ldi	r30, 0x01	; 1
 21e:	f1 e0       	ldi	r31, 0x01	; 1
 220:	80 81       	ld	r24, Z
 222:	88 60       	ori	r24, 0x08	; 8
 224:	80 83       	st	Z, r24
  LCD_DDR_D7 = 1;
 226:	80 81       	ld	r24, Z
 228:	80 61       	ori	r24, 0x10	; 16
 22a:	80 83       	st	Z, r24
  LCD_DDR_RS = 1;
 22c:	80 81       	ld	r24, Z
 22e:	80 62       	ori	r24, 0x20	; 32
 230:	80 83       	st	Z, r24
  LCD_DDR_E0 = 1;
 232:	80 81       	ld	r24, Z
 234:	80 64       	ori	r24, 0x40	; 64
 236:	80 83       	st	Z, r24
  LCD_E0 = 0;
 238:	e2 e0       	ldi	r30, 0x02	; 2
 23a:	f1 e0       	ldi	r31, 0x01	; 1
 23c:	80 81       	ld	r24, Z
 23e:	8f 7b       	andi	r24, 0xBF	; 191
 240:	80 83       	st	Z, r24
  LCD_RS = 0;                                   // send commands
 242:	80 81       	ld	r24, Z
 244:	8f 7d       	andi	r24, 0xDF	; 223
 246:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 248:	8f e5       	ldi	r24, 0x5F	; 95
 24a:	9a ee       	ldi	r25, 0xEA	; 234
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <lcd_init+0x34>
 250:	00 c0       	rjmp	.+0      	; 0x252 <lcd_init+0x3a>
 252:	00 00       	nop

  _delay_ms( 15 );
  lcd_nibble( 0x30 );
 254:	80 e3       	ldi	r24, 0x30	; 48
 256:	66 df       	rcall	.-308    	; 0x124 <lcd_nibble>
 258:	8f e0       	ldi	r24, 0x0F	; 15
 25a:	90 e4       	ldi	r25, 0x40	; 64
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_init+0x44>
 260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_init+0x4a>
 262:	00 00       	nop
  _delay_ms( 4.1 );
  lcd_nibble( 0x30 );
 264:	80 e3       	ldi	r24, 0x30	; 48
 266:	5e df       	rcall	.-324    	; 0x124 <lcd_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 268:	8f e8       	ldi	r24, 0x8F	; 143
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <lcd_init+0x54>
 270:	00 c0       	rjmp	.+0      	; 0x272 <lcd_init+0x5a>
  _delay_us( 100 );
  lcd_nibble( 0x30 );
 272:	00 00       	nop
 274:	80 e3       	ldi	r24, 0x30	; 48
 276:	56 df       	rcall	.-340    	; 0x124 <lcd_nibble>
 278:	87 ec       	ldi	r24, 0xC7	; 199
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <lcd_init+0x64>
 280:	00 c0       	rjmp	.+0      	; 0x282 <lcd_init+0x6a>
  _delay_us( LCD_TIME_DAT );
  lcd_nibble( 0x20 );                           // 4 bit mode
 282:	00 00       	nop
 284:	80 e2       	ldi	r24, 0x20	; 32
 286:	4e df       	rcall	.-356    	; 0x124 <lcd_nibble>
 288:	87 ec       	ldi	r24, 0xC7	; 199
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <lcd_init+0x74>
 290:	00 c0       	rjmp	.+0      	; 0x292 <lcd_init+0x7a>
  _delay_us( LCD_TIME_DAT );
#if LCD_LINE == 1
  lcd_command( 0x20 );                          // 1 line
#else
  lcd_command( 0x28 );                          // 2 lines 5*7
 292:	00 00       	nop
 294:	88 e2       	ldi	r24, 0x28	; 40
#endif
  lcd_command( 0x08 );                          // display off
 296:	6d df       	rcall	.-294    	; 0x172 <lcd_command>
 298:	88 e0       	ldi	r24, 0x08	; 8
  lcd_command( 0x01 );                          // display clear
 29a:	6b df       	rcall	.-298    	; 0x172 <lcd_command>
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	69 df       	rcall	.-302    	; 0x172 <lcd_command>
  lcd_command( 0x06 );                          // cursor increment
 2a0:	86 e0       	ldi	r24, 0x06	; 6
 2a2:	67 df       	rcall	.-306    	; 0x172 <lcd_command>
 2a4:	8c e0       	ldi	r24, 0x0C	; 12
  lcd_command( 0x0C );                          // on, no cursor, no blink
 2a6:	65 cf       	rjmp	.-310    	; 0x172 <lcd_command>
 2a8:	08 95       	ret

000002aa <poll_adc>:
unsigned short result_low;
unsigned short result_high;
unsigned short poll_adc(){
	unsigned short adc_result = 0; //16 bits
	
	ADCSRA |= 0x40;
 2aa:	ea e7       	ldi	r30, 0x7A	; 122
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	80 64       	ori	r24, 0x40	; 64
 2b2:	80 83       	st	Z, r24
	while((ADCSRA & 0x40) == 0x40); //Busy-wait
 2b4:	80 81       	ld	r24, Z
 2b6:	86 fd       	sbrc	r24, 6
 2b8:	fd cf       	rjmp	.-6      	; 0x2b4 <poll_adc+0xa>
	
	result_low = ADCL;
 2ba:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <result_low+0x1>
 2c4:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <result_low>
	short result_high = ADCH;
 2c8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	
	adc_result = (result_high<<8)|result_low;
	return adc_result;
}
 2cc:	92 2b       	or	r25, r18
 2ce:	08 95       	ret

000002d0 <button_check>:
int button_check(unsigned short adc_result){
	if(adc_result >= ADC_BTN_SELECT&& result_low >= ADC_MID){return 0;}
 2d0:	86 31       	cpi	r24, 0x16	; 22
 2d2:	23 e0       	ldi	r18, 0x03	; 3
 2d4:	92 07       	cpc	r25, r18
 2d6:	58 f0       	brcs	.+22     	; 0x2ee <button_check+0x1e>
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <result_low>
 2e0:	30 91 27 03 	lds	r19, 0x0327	; 0x800327 <result_low+0x1>
 2e4:	28 3e       	cpi	r18, 0xE8	; 232
 2e6:	31 05       	cpc	r19, r1
 2e8:	40 f1       	brcs	.+80     	; 0x33a <button_check+0x6a>
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	08 95       	ret
	if (adc_result >= ADC_BTN_SELECT&& result_low < ADC_MID){ return 1;}
	if (adc_result >= ADC_BTN_LEFT && adc_result < ADC_BTN_SELECT){  return 2; }
 2ee:	9c 01       	movw	r18, r24
 2f0:	2b 52       	subi	r18, 0x2B	; 43
 2f2:	32 40       	sbci	r19, 0x02	; 2
 2f4:	2b 3e       	cpi	r18, 0xEB	; 235
 2f6:	31 05       	cpc	r19, r1
 2f8:	90 f0       	brcs	.+36     	; 0x31e <button_check+0x4e>
	if (adc_result >= ADC_BTN_DOWN && adc_result < ADC_BTN_LEFT){return 3;}
 2fa:	21 55       	subi	r18, 0x51	; 81
 2fc:	3f 4f       	sbci	r19, 0xFF	; 255
 2fe:	2f 3a       	cpi	r18, 0xAF	; 175
 300:	31 05       	cpc	r19, r1
 302:	80 f0       	brcs	.+32     	; 0x324 <button_check+0x54>
	if (adc_result >= ADC_BTN_UP && adc_result < ADC_BTN_DOWN){return 4;}
 304:	27 54       	subi	r18, 0x47	; 71
 306:	3f 4f       	sbci	r19, 0xFF	; 255
 308:	29 3b       	cpi	r18, 0xB9	; 185
 30a:	31 05       	cpc	r19, r1
 30c:	70 f0       	brcs	.+28     	; 0x32a <button_check+0x5a>
	if (adc_result >= ADC_BTN_RIGHT && adc_result < ADC_BTN_UP){return 5;}
 30e:	2f 56       	subi	r18, 0x6F	; 111
 310:	3f 4f       	sbci	r19, 0xFF	; 255
 312:	21 39       	cpi	r18, 0x91	; 145
 314:	31 05       	cpc	r19, r1
 316:	60 f0       	brcs	.+24     	; 0x330 <button_check+0x60>
	if(adc_result <= ADC_BTN_RIGHT){return 6;}
 318:	c3 97       	sbiw	r24, 0x33	; 51
 31a:	68 f0       	brcs	.+26     	; 0x336 <button_check+0x66>
	//Up button pressed
}
 31c:	08 95       	ret
	return adc_result;
}
int button_check(unsigned short adc_result){
	if(adc_result >= ADC_BTN_SELECT&& result_low >= ADC_MID){return 0;}
	if (adc_result >= ADC_BTN_SELECT&& result_low < ADC_MID){ return 1;}
	if (adc_result >= ADC_BTN_LEFT && adc_result < ADC_BTN_SELECT){  return 2; }
 31e:	82 e0       	ldi	r24, 0x02	; 2
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	08 95       	ret
	if (adc_result >= ADC_BTN_DOWN && adc_result < ADC_BTN_LEFT){return 3;}
 324:	83 e0       	ldi	r24, 0x03	; 3
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	08 95       	ret
	if (adc_result >= ADC_BTN_UP && adc_result < ADC_BTN_DOWN){return 4;}
 32a:	84 e0       	ldi	r24, 0x04	; 4
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	08 95       	ret
	if (adc_result >= ADC_BTN_RIGHT && adc_result < ADC_BTN_UP){return 5;}
 330:	85 e0       	ldi	r24, 0x05	; 5
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	08 95       	ret
	if(adc_result <= ADC_BTN_RIGHT){return 6;}
 336:	86 e0       	ldi	r24, 0x06	; 6
 338:	90 e0       	ldi	r25, 0x00	; 0
	//Up button pressed
}
 33a:	08 95       	ret

0000033c <changeMess>:
int select =0;
void changeMess()
{
	
	if (select ==0)
 33c:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <select>
 340:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <select+0x1>
 344:	89 2b       	or	r24, r25
 346:	99 f4       	brne	.+38     	; 0x36e <changeMess+0x32>
	{
		upper = ("This is the message on the first line. Here it goes.");
 348:	83 e1       	ldi	r24, 0x13	; 19
 34a:	92 e0       	ldi	r25, 0x02	; 2
 34c:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <upper+0x1>
 350:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <upper>
		lower = ("--- buy --- more --- pop --- buy ");
 354:	88 e4       	ldi	r24, 0x48	; 72
 356:	92 e0       	ldi	r25, 0x02	; 2
 358:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <lower+0x1>
 35c:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <lower>
		select =1;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <select+0x1>
 368:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <select>
 36c:	08 95       	ret
	}
	else
	{
		upper = ("This is the first message displayed on the first line of the LCD.");
 36e:	8a e6       	ldi	r24, 0x6A	; 106
 370:	92 e0       	ldi	r25, 0x02	; 2
 372:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <upper+0x1>
 376:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <upper>
		lower = ("On the second line of the LCD there is another message that is scrolled.");
 37a:	8c ea       	ldi	r24, 0xAC	; 172
 37c:	92 e0       	ldi	r25, 0x02	; 2
 37e:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <lower+0x1>
 382:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <lower>
		select =0;
 386:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <select+0x1>
 38a:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <select>
 38e:	08 95       	ret

00000390 <delaySpeed>:
	}
}
int delayTime =500;
void delaySpeed()
{
	if (button_check(poll_adc()) == 3)
 390:	8c df       	rcall	.-232    	; 0x2aa <poll_adc>
 392:	9e df       	rcall	.-196    	; 0x2d0 <button_check>
 394:	03 97       	sbiw	r24, 0x03	; 3
 396:	51 f4       	brne	.+20     	; 0x3ac <delaySpeed+0x1c>
	{
		delayTime = delayTime*2;
 398:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <delayTime>
 39c:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <delayTime+0x1>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <delayTime+0x1>
 3a8:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <delayTime>
	}
	if (button_check(poll_adc()) == 6)
 3ac:	7e df       	rcall	.-260    	; 0x2aa <poll_adc>
 3ae:	90 df       	rcall	.-224    	; 0x2d0 <button_check>
 3b0:	06 97       	sbiw	r24, 0x06	; 6
 3b2:	69 f4       	brne	.+26     	; 0x3ce <delaySpeed+0x3e>
 3b4:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <delayTime>
	{
		delayTime =delayTime/2;
 3b8:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <delayTime+0x1>
 3bc:	99 23       	and	r25, r25
 3be:	0c f4       	brge	.+2      	; 0x3c2 <delaySpeed+0x32>
 3c0:	01 96       	adiw	r24, 0x01	; 1
 3c2:	95 95       	asr	r25
 3c4:	87 95       	ror	r24
 3c6:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <delayTime+0x1>
 3ca:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <delayTime>
 3ce:	08 95       	ret

000003d0 <delay>:
 3d0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
}
int led_pos=0;
void delay()
{
	DDRL = 0x00;
	DDRB = 0x00;
 3d4:	14 b8       	out	0x04, r1	; 4
	if (led_pos <6)
 3d6:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <led_pos>
 3da:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <led_pos+0x1>
 3de:	86 30       	cpi	r24, 0x06	; 6
 3e0:	91 05       	cpc	r25, r1
 3e2:	bc f4       	brge	.+46     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	{
		PORTB = portb_pattern[led_pos];
 3e4:	fc 01       	movw	r30, r24
 3e6:	e3 5f       	subi	r30, 0xF3	; 243
 3e8:	fd 4f       	sbci	r31, 0xFD	; 253
 3ea:	80 81       	ld	r24, Z
 3ec:	85 b9       	out	0x05, r24	; 5
		PORTL = portl_pattern[led_pos];
 3ee:	e0 91 fe 02 	lds	r30, 0x02FE	; 0x8002fe <led_pos>
 3f2:	f0 91 ff 02 	lds	r31, 0x02FF	; 0x8002ff <led_pos+0x1>
 3f6:	e9 5f       	subi	r30, 0xF9	; 249
 3f8:	fd 4f       	sbci	r31, 0xFD	; 253
 3fa:	80 81       	ld	r24, Z
 3fc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
		led_pos++;
 400:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <led_pos>
 404:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <led_pos+0x1>
 408:	01 96       	adiw	r24, 0x01	; 1
 40a:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <led_pos+0x1>
 40e:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <led_pos>
	}
	
	for (int i =0;i<delayTime;i++)
 412:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <delayTime>
 416:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <delayTime+0x1>
 41a:	18 16       	cp	r1, r24
 41c:	19 06       	cpc	r1, r25
 41e:	84 f4       	brge	.+32     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 424:	ef e9       	ldi	r30, 0x9F	; 159
 426:	ff e0       	ldi	r31, 0x0F	; 15
 428:	31 97       	sbiw	r30, 0x01	; 1
 42a:	f1 f7       	brne	.-4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42e:	00 00       	nop
 430:	01 96       	adiw	r24, 0x01	; 1
 432:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <delayTime>
 436:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <delayTime+0x1>
 43a:	82 17       	cp	r24, r18
 43c:	93 07       	cpc	r25, r19
 43e:	94 f3       	brlt	.-28     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	{
		_delay_ms(1);
	}
	if (led_pos==6)
 440:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <led_pos>
 444:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <led_pos+0x1>
 448:	06 97       	sbiw	r24, 0x06	; 6
 44a:	21 f4       	brne	.+8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	{
		led_pos=0;
 44c:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <led_pos+0x1>
 450:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <led_pos>
 454:	08 95       	ret

00000456 <sentUp>:
int secondNum2 =0;
int posLow = 0;
char sentenceUp[16];
int secondNum1 =0;
int posup = 0;
void sentUp(char* sent1){
 456:	dc 01       	movw	r26, r24
int iup =0;	
int j =0;
	if (posup < strlen(sent1)-15)
 458:	fc 01       	movw	r30, r24
 45a:	01 90       	ld	r0, Z+
 45c:	00 20       	and	r0, r0
 45e:	e9 f7       	brne	.-6      	; 0x45a <sentUp+0x4>
 460:	af 01       	movw	r20, r30
 462:	48 1b       	sub	r20, r24
 464:	59 0b       	sbc	r21, r25
 466:	20 91 f6 02 	lds	r18, 0x02F6	; 0x8002f6 <__data_end>
 46a:	30 91 f7 02 	lds	r19, 0x02F7	; 0x8002f7 <__data_end+0x1>
 46e:	40 51       	subi	r20, 0x10	; 16
 470:	51 09       	sbc	r21, r1
 472:	24 17       	cp	r18, r20
 474:	35 07       	cpc	r19, r21
 476:	60 f4       	brcc	.+24     	; 0x490 <sentUp+0x3a>
 478:	a2 0f       	add	r26, r18
 47a:	b3 1f       	adc	r27, r19
 47c:	e4 e1       	ldi	r30, 0x14	; 20
 47e:	f3 e0       	ldi	r31, 0x03	; 3
 480:	24 e2       	ldi	r18, 0x24	; 36
 482:	33 e0       	ldi	r19, 0x03	; 3
	{
			while(iup<16)
			{
			sentenceUp[iup]=sent1[iup+posup];
 484:	8d 91       	ld	r24, X+
 486:	81 93       	st	Z+, r24
void sentUp(char* sent1){
int iup =0;	
int j =0;
	if (posup < strlen(sent1)-15)
	{
			while(iup<16)
 488:	e2 17       	cp	r30, r18
 48a:	f3 07       	cpc	r31, r19
 48c:	d9 f7       	brne	.-10     	; 0x484 <sentUp+0x2e>
 48e:	23 c0       	rjmp	.+70     	; 0x4d6 <sentUp+0x80>
 490:	e4 e1       	ldi	r30, 0x14	; 20
 492:	f3 e0       	ldi	r31, 0x03	; 3
 494:	23 e2       	ldi	r18, 0x23	; 35
 496:	33 e0       	ldi	r19, 0x03	; 3
	}
	else if (posup >= strlen(sent1)-15)
	{
		while (j<15)
		{
			sentenceUp[j] = sentenceUp[j+1];	
 498:	91 81       	ldd	r25, Z+1	; 0x01
 49a:	91 93       	st	Z+, r25
			iup++;
			}
	}
	else if (posup >= strlen(sent1)-15)
	{
		while (j<15)
 49c:	e2 17       	cp	r30, r18
 49e:	f3 07       	cpc	r31, r19
 4a0:	d9 f7       	brne	.-10     	; 0x498 <sentUp+0x42>
		{
			sentenceUp[j] = sentenceUp[j+1];	
			j++;		
		}
		sentenceUp[15] = sent1[secondNum1];
 4a2:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <secondNum1>
 4a6:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <secondNum1+0x1>
 4aa:	a8 0f       	add	r26, r24
 4ac:	b9 1f       	adc	r27, r25
 4ae:	2c 91       	ld	r18, X
 4b0:	20 93 23 03 	sts	0x0323, r18	; 0x800323 <sentenceUp+0xf>
		secondNum1++;
 4b4:	01 96       	adiw	r24, 0x01	; 1
		if (secondNum1>15)
 4b6:	80 31       	cpi	r24, 0x10	; 16
 4b8:	91 05       	cpc	r25, r1
 4ba:	2c f4       	brge	.+10     	; 0x4c6 <sentUp+0x70>
		{
			sentenceUp[j] = sentenceUp[j+1];	
			j++;		
		}
		sentenceUp[15] = sent1[secondNum1];
		secondNum1++;
 4bc:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <secondNum1+0x1>
 4c0:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <secondNum1>
 4c4:	08 c0       	rjmp	.+16     	; 0x4d6 <sentUp+0x80>
		if (secondNum1>15)
		{
			secondNum1=0;
 4c6:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <secondNum1+0x1>
 4ca:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <secondNum1>
			posup =0;
 4ce:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <__data_end+0x1>
 4d2:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <__data_end>
		}
	}	
	posup++;
 4d6:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <__data_end>
 4da:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <__data_end+0x1>
 4de:	01 96       	adiw	r24, 0x01	; 1
 4e0:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <__data_end+0x1>
 4e4:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <__data_end>
 4e8:	08 95       	ret

000004ea <sentLow>:
}

void sentLow(char* sent2){
 4ea:	dc 01       	movw	r26, r24
	int iup =0;
	int j =0;
	
	if (posLow < strlen(sent2)-15)
 4ec:	fc 01       	movw	r30, r24
 4ee:	01 90       	ld	r0, Z+
 4f0:	00 20       	and	r0, r0
 4f2:	e9 f7       	brne	.-6      	; 0x4ee <sentLow+0x4>
 4f4:	af 01       	movw	r20, r30
 4f6:	48 1b       	sub	r20, r24
 4f8:	59 0b       	sbc	r21, r25
 4fa:	20 91 fa 02 	lds	r18, 0x02FA	; 0x8002fa <posLow>
 4fe:	30 91 fb 02 	lds	r19, 0x02FB	; 0x8002fb <posLow+0x1>
 502:	40 51       	subi	r20, 0x10	; 16
 504:	51 09       	sbc	r21, r1
 506:	24 17       	cp	r18, r20
 508:	35 07       	cpc	r19, r21
 50a:	60 f4       	brcc	.+24     	; 0x524 <sentLow+0x3a>
 50c:	a2 0f       	add	r26, r18
 50e:	b3 1f       	adc	r27, r19
 510:	e4 e0       	ldi	r30, 0x04	; 4
 512:	f3 e0       	ldi	r31, 0x03	; 3
 514:	24 e1       	ldi	r18, 0x14	; 20
 516:	33 e0       	ldi	r19, 0x03	; 3
	{
		while(iup<16)
		{
			sentenceLow[iup]=sent2[iup+posLow];
 518:	8d 91       	ld	r24, X+
 51a:	81 93       	st	Z+, r24
	int iup =0;
	int j =0;
	
	if (posLow < strlen(sent2)-15)
	{
		while(iup<16)
 51c:	e2 17       	cp	r30, r18
 51e:	f3 07       	cpc	r31, r19
 520:	d9 f7       	brne	.-10     	; 0x518 <sentLow+0x2e>
 522:	23 c0       	rjmp	.+70     	; 0x56a <sentLow+0x80>
 524:	e4 e0       	ldi	r30, 0x04	; 4
 526:	f3 e0       	ldi	r31, 0x03	; 3
 528:	23 e1       	ldi	r18, 0x13	; 19
 52a:	33 e0       	ldi	r19, 0x03	; 3
	}
	else if (posLow >= strlen(sent2)-15)
	{
		while (j<15)
		{
			sentenceLow[j] = sentenceLow[j+1];
 52c:	91 81       	ldd	r25, Z+1	; 0x01
 52e:	91 93       	st	Z+, r25
			iup++;
		}
	}
	else if (posLow >= strlen(sent2)-15)
	{
		while (j<15)
 530:	e2 17       	cp	r30, r18
 532:	f3 07       	cpc	r31, r19
 534:	d9 f7       	brne	.-10     	; 0x52c <sentLow+0x42>
		{
			sentenceLow[j] = sentenceLow[j+1];
			j++;
			
		}
		sentenceLow[15] = sent2[secondNum2];
 536:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <secondNum2>
 53a:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <secondNum2+0x1>
 53e:	a8 0f       	add	r26, r24
 540:	b9 1f       	adc	r27, r25
 542:	2c 91       	ld	r18, X
 544:	20 93 13 03 	sts	0x0313, r18	; 0x800313 <sentenceLow+0xf>
		secondNum2++;
 548:	01 96       	adiw	r24, 0x01	; 1
		if (secondNum2>15)
 54a:	80 31       	cpi	r24, 0x10	; 16
 54c:	91 05       	cpc	r25, r1
 54e:	2c f4       	brge	.+10     	; 0x55a <sentLow+0x70>
			sentenceLow[j] = sentenceLow[j+1];
			j++;
			
		}
		sentenceLow[15] = sent2[secondNum2];
		secondNum2++;
 550:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <secondNum2+0x1>
 554:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <secondNum2>
 558:	08 c0       	rjmp	.+16     	; 0x56a <sentLow+0x80>
		if (secondNum2>15)
		{
			secondNum2=0;
 55a:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <secondNum2+0x1>
 55e:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <secondNum2>
			posLow =0;
 562:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <posLow+0x1>
 566:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <posLow>
		}
	}
	posLow++;
 56a:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <posLow>
 56e:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <posLow+0x1>
 572:	01 96       	adiw	r24, 0x01	; 1
 574:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <posLow+0x1>
 578:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <posLow>
 57c:	08 95       	ret

0000057e <show>:
}
void show()
{
	lcd_init();
 57e:	4c de       	rcall	.-872    	; 0x218 <lcd_init>
	sentUp(upper);
 580:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <upper>
 584:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <upper+0x1>
 588:	66 df       	rcall	.-308    	; 0x456 <sentUp>
void lcd_command( uint8_t d );

// An inline function to set the x and y position
// in a 2-line LCD display
static inline void lcd_xy(uint8_t x, uint8_t y){
	lcd_command(x + ((y==1) ? LCD_LINE2 : LCD_LINE1 ));
 58a:	80 e8       	ldi	r24, 0x80	; 128
 58c:	f2 dd       	rcall	.-1052   	; 0x172 <lcd_command>
	lcd_xy(0,0);
	lcd_puts(sentenceUp);
 58e:	84 e1       	ldi	r24, 0x14	; 20
 590:	93 e0       	ldi	r25, 0x03	; 3
 592:	34 de       	rcall	.-920    	; 0x1fc <lcd_puts>
 594:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <lower>
	sentLow(lower);
 598:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <lower+0x1>
 59c:	a6 df       	rcall	.-180    	; 0x4ea <sentLow>
 59e:	80 ec       	ldi	r24, 0xC0	; 192
 5a0:	e8 dd       	rcall	.-1072   	; 0x172 <lcd_command>
	lcd_xy(0,1);
	lcd_puts(sentenceLow);
 5a2:	84 e0       	ldi	r24, 0x04	; 4
 5a4:	93 e0       	ldi	r25, 0x03	; 3
 5a6:	2a de       	rcall	.-940    	; 0x1fc <lcd_puts>
 5a8:	13 cf       	rjmp	.-474    	; 0x3d0 <delay>
	delay();
 5aa:	08 95       	ret

000005ac <normal2>:
 5ac:	7e de       	rcall	.-772    	; 0x2aa <poll_adc>
 5ae:	90 de       	rcall	.-736    	; 0x2d0 <button_check>
	}
}
void normal2(){
	while (1)
	{
		if (button_check(poll_adc()) == 4)
 5b0:	04 97       	sbiw	r24, 0x04	; 4
 5b2:	e1 f7       	brne	.-8      	; 0x5ac <normal2>
		{
			printSent();
 5b4:	01 d0       	rcall	.+2      	; 0x5b8 <printSent>
 5b6:	fa cf       	rjmp	.-12     	; 0x5ac <normal2>

000005b8 <printSent>:
 5b8:	78 de       	rcall	.-784    	; 0x2aa <poll_adc>

void printSent(){
	while (1)
	{
		
		if (button_check(poll_adc()) == 2)
 5ba:	8a de       	rcall	.-748    	; 0x2d0 <button_check>
 5bc:	02 97       	sbiw	r24, 0x02	; 2
 5be:	09 f4       	brne	.+2      	; 0x5c2 <printSent+0xa>
		{
			changeMess();
 5c0:	bd de       	rcall	.-646    	; 0x33c <changeMess>
		}
		if (button_check(poll_adc()) == 3||button_check(poll_adc()) == 6)
 5c2:	73 de       	rcall	.-794    	; 0x2aa <poll_adc>
 5c4:	85 de       	rcall	.-758    	; 0x2d0 <button_check>
 5c6:	03 97       	sbiw	r24, 0x03	; 3
 5c8:	21 f0       	breq	.+8      	; 0x5d2 <printSent+0x1a>
 5ca:	6f de       	rcall	.-802    	; 0x2aa <poll_adc>
 5cc:	81 de       	rcall	.-766    	; 0x2d0 <button_check>
 5ce:	06 97       	sbiw	r24, 0x06	; 6
 5d0:	09 f4       	brne	.+2      	; 0x5d4 <printSent+0x1c>
		{
			delaySpeed();
 5d2:	de de       	rcall	.-580    	; 0x390 <delaySpeed>
 5d4:	6a de       	rcall	.-812    	; 0x2aa <poll_adc>
		}
		if (button_check(poll_adc()) == 5)
 5d6:	7c de       	rcall	.-776    	; 0x2d0 <button_check>
 5d8:	05 97       	sbiw	r24, 0x05	; 5
 5da:	09 f4       	brne	.+2      	; 0x5de <printSent+0x26>
 5dc:	e7 df       	rcall	.-50     	; 0x5ac <normal2>
 5de:	cf df       	rcall	.-98     	; 0x57e <show>
 5e0:	eb cf       	rjmp	.-42     	; 0x5b8 <printSent>

000005e2 <__vector_23>:
		{
			normal2();
 5e2:	1f 92       	push	r1
 5e4:	0f 92       	push	r0
		}
		
		show();
 5e6:	0f b6       	in	r0, 0x3f	; 63
 5e8:	0f 92       	push	r0
	}
 5ea:	11 24       	eor	r1, r1
		
		
	}
}

ISR(TIMER0_OVF_vect){
 5ec:	0b b6       	in	r0, 0x3b	; 59
 5ee:	0f 92       	push	r0
 5f0:	2f 93       	push	r18
 5f2:	3f 93       	push	r19
 5f4:	4f 93       	push	r20
 5f6:	5f 93       	push	r21
 5f8:	6f 93       	push	r22
 5fa:	7f 93       	push	r23
 5fc:	8f 93       	push	r24
 5fe:	9f 93       	push	r25
 600:	af 93       	push	r26
 602:	bf 93       	push	r27
 604:	ef 93       	push	r30
 606:	ff 93       	push	r31
	interrupt_count++;
 608:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <interrupt_count>
 60c:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <interrupt_count+0x1>
 610:	9c 01       	movw	r18, r24
 612:	2f 5f       	subi	r18, 0xFF	; 255
 614:	3f 4f       	sbci	r19, 0xFF	; 255
	//Every 61 interrupts, flip the LED value
	if (interrupt_count >= 6){
 616:	26 30       	cpi	r18, 0x06	; 6
 618:	31 05       	cpc	r19, r1
 61a:	74 f0       	brlt	.+28     	; 0x638 <__vector_23+0x56>
		interrupt_count -= 6;
 61c:	05 97       	sbiw	r24, 0x05	; 5
 61e:	90 93 03 03 	sts	0x0303, r25	; 0x800303 <interrupt_count+0x1>
 622:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <interrupt_count>
		
		int adc_result = button_check(poll_adc());
 626:	41 de       	rcall	.-894    	; 0x2aa <poll_adc>
 628:	53 de       	rcall	.-858    	; 0x2d0 <button_check>
		
		if(adc_result ==0){
 62a:	00 97       	sbiw	r24, 0x00	; 0
				printSent();	
 62c:	09 f4       	brne	.+2      	; 0x630 <__vector_23+0x4e>
		}
		if(adc_result ==1){
 62e:	c4 df       	rcall	.-120    	; 0x5b8 <printSent>
			changeMess();
 630:	01 97       	sbiw	r24, 0x01	; 1
 632:	31 f4       	brne	.+12     	; 0x640 <__vector_23+0x5e>
			printSent();
 634:	83 de       	rcall	.-762    	; 0x33c <changeMess>
 636:	c0 df       	rcall	.-128    	; 0x5b8 <printSent>
		
	}
}

ISR(TIMER0_OVF_vect){
	interrupt_count++;
 638:	30 93 03 03 	sts	0x0303, r19	; 0x800303 <interrupt_count+0x1>
 63c:	20 93 02 03 	sts	0x0302, r18	; 0x800302 <interrupt_count>
			changeMess();
			printSent();
		}
		
	}
}
 640:	ff 91       	pop	r31
 642:	ef 91       	pop	r30
 644:	bf 91       	pop	r27
 646:	af 91       	pop	r26
 648:	9f 91       	pop	r25
 64a:	8f 91       	pop	r24
 64c:	7f 91       	pop	r23
 64e:	6f 91       	pop	r22
 650:	5f 91       	pop	r21
 652:	4f 91       	pop	r20
 654:	3f 91       	pop	r19
 656:	2f 91       	pop	r18
 658:	0f 90       	pop	r0
 65a:	0b be       	out	0x3b, r0	; 59
 65c:	0f 90       	pop	r0
 65e:	0f be       	out	0x3f, r0	; 63
 660:	0f 90       	pop	r0
 662:	1f 90       	pop	r1
 664:	18 95       	reti

00000666 <timer0_setup>:
void timer0_setup(){
	//You can also enable output compare mode or use other
	//timers (as you would do in assembly).

	TIMSK0 = 0x01;
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
	TCNT0 = 0x00;
 66c:	16 bc       	out	0x26, r1	; 38
	TCCR0A = 0x00;
 66e:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05; //Prescaler of 1024
 670:	85 e0       	ldi	r24, 0x05	; 5
 672:	85 bd       	out	0x25, r24	; 37
 674:	08 95       	ret

00000676 <main>:
}

	
int main(){
	//ADC Set up
	ADCSRA = 0x87;
 676:	87 e8       	ldi	r24, 0x87	; 135
 678:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	ADMUX = 0x40;
 67c:	80 e4       	ldi	r24, 0x40	; 64
 67e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>

	timer0_setup();
 682:	f1 df       	rcall	.-30     	; 0x666 <timer0_setup>
	lcd_init();
 684:	c9 dd       	rcall	.-1134   	; 0x218 <lcd_init>
 686:	78 94       	sei
	//Enable interrupts
	//(The sei() function is defined by the AVR library as
	// a wrapper around the sei instruction)
	sei();
 688:	ff cf       	rjmp	.-2      	; 0x688 <main+0x12>

0000068a <_exit>:
 68a:	f8 94       	cli

0000068c <__stop_program>:
 68c:	ff cf       	rjmp	.-2      	; 0x68c <__stop_program>
